{"_id":"XJ3HqInnuWjci0Ja","id":"2","bool":false,"baseincome":"40.89%","detailtime":"2014-01-01 至 2019-01-01","title":"格式成长策略","yearpercent":"16.23%","percent":"满仓，等额","income":"115.3%","drawdown":"18.06%","code":"# 模块导入\u003cbr /\u003e import numpy as np\u003cbr /\u003e import pandas as pd\u003cbr /\u003e import datetime\u003cbr /\u003e import math\u003cbr /\u003e import time\u003cbr /\u003e from datetime import date\u003cbr /\u003e import re\u003cbr /\u003e \u003cbr /\u003e '''\u003cbr /\u003e 格氏成长策略\u003cbr /\u003e '''\u003cbr /\u003e # 参数设置：\u003cbr /\u003e \u003cbr /\u003e #策略名'格氏成长,择时'\u003cbr /\u003e name = '格氏成长 择时'\u003cbr /\u003e # 对比基准设置\u003cbr /\u003e num1 = '000905.SH'\u003cbr /\u003e # 选股条件\u003cbr /\u003e num2 = '中证500股票 上市天数\u0026gt;200'\u003cbr /\u003e # 目标选股数量\u003cbr /\u003e num3 = 5\u003cbr /\u003e #市场空仓对应的PB分位数阈值\u003cbr /\u003e num4 = 0.8\u003cbr /\u003e #长期空仓天数\u003cbr /\u003e num5 = 240\u003cbr /\u003e #中期空仓天数\u003cbr /\u003e num6 = 90\u003cbr /\u003e \u003cbr /\u003e \u003cbr /\u003e def init(context):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; set_benchmark(num1)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; get_iwencai(num2)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; context.signal = True\u0026nbsp;\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; context.b = True\u0026nbsp;\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; run_weekly(func=handle, date_rule=1, reference_security = '000001.SZ')\u003cbr /\u003e \u0026nbsp; \u0026nbsp;\u0026nbsp;\u003cbr /\u003e def handle(context,bar_dict):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; patt=r'择时'\u003cbr /\u003e \u0026nbsp; \u0026nbsp; pattern = re.compile(patt)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; result = pattern.findall(name)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; if result:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; period, context.signal = time_select(context)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; if context.signal == 'kongcang' and context.b is True:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; context.b = False\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; context.date = get_datetime() + datetime.timedelta(days=period)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; for stock in list(context.portfolio.stock_account.positions.keys()):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; order_target_value(stock, 0)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; log.info('空仓信号在' + get_datetime().strftime('%Y-%m-%d') + '触发，空仓' + str(period) + '天')\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; if context.b is False and get_datetime() \u0026gt; context.date:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; context.b = True\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; if context.signal == 'chaodi':\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; context.b = True\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; context.signal = True\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; if context.signal is True and context.b is True:\u0026nbsp;\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; buylist = GrahamStockFilter(context)\u0026nbsp;\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; for hold in list(context.portfolio.stock_account.positions.keys()):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; if hold not in list(buylist):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; order_target_value(hold, 0)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; for stock in buylist:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; order_target_percent(stock, 0.5 / len(buylist))\u003cbr /\u003e \u0026nbsp; \u0026nbsp; else:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; buylist = GrahamStockFilter(context)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; for hold in list(context.portfolio.stock_account.positions):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; if hold not in list(buylist):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; order_target_value(hold, 0)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; for stock in buylist:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; order_target_percent(stock, 0.5 / len(buylist))\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\u0026nbsp;\u003cbr /\u003e \u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\u0026nbsp;\u003cbr /\u003e def GrahamStockFilter(context,overflow=0):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1 = Data(context)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; buylist = Gscz(context,df1)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; log.info(get_datetime().strftime('%Y-%m-%d') + '选股为:' + str(buylist)[:])\u003cbr /\u003e \u0026nbsp; \u0026nbsp; return buylist\u003cbr /\u003e \u0026nbsp; \u0026nbsp;\u0026nbsp;\u003cbr /\u003e # 数据获取\u003cbr /\u003e def Data(context):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; yesterday = get_last_datetime().strftime('%Y%m%d')\u003cbr /\u003e \u0026nbsp; \u0026nbsp; today = get_datetime().strftime('%Y%m%d')\u003cbr /\u003e \u0026nbsp; \u0026nbsp; #context.iwencai_securities = get_index_stocks('000300.SH')\u003cbr /\u003e \u0026nbsp; \u0026nbsp; #context.iwencai_securities = list(get_all_securities('stock',yesterday).index)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; stock_list = context.iwencai_securities\u003cbr /\u003e \u0026nbsp; \u0026nbsp; value = get_price(stock_list, None, today, '1d', ['is_paused', 'is_st','open','high_limit','low_limit'], True, None, 1, is_panel=1)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; stock_list = [stock for stock in stock_list if value['is_paused'].ix[0,stock] == 0]\u003cbr /\u003e \u0026nbsp; \u0026nbsp; stock_list = [stock for stock in stock_list if value['is_st'].ix[0,stock] == 0]\u003cbr /\u003e \u0026nbsp; \u0026nbsp; stock_list = [stock for stock in stock_list if value['open'].ix[0,stock] != value['high_limit'].ix[0,stock] and value['open'].ix[0,stock]!= value['low_limit'].ix[0,stock]]\u003cbr /\u003e \u0026nbsp; \u0026nbsp; log.info('股票池数量：%d' %len(stock_list))\u003cbr /\u003e \u0026nbsp; \u0026nbsp; #获取财务数据\u003cbr /\u003e \u0026nbsp; \u0026nbsp; q = query(\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; valuation.symbol,\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; income.basic_eps,\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; valuation.pb,\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; valuation.pe,\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; valuation.market_cap,\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; income_sq.profit_from_operations,\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; valuation.capitalization,\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; profit_sq.roe,\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; balance.total_liabilities,\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; growth_sq.opt_profit_growth_ratio).filter(valuation.symbol.in_(stock_list)).order_by(\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; valuation.symbol)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1 = get_fundamentals(q,date=yesterday)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1 = df1.set_index(df1['valuation_symbol'])\u003cbr /\u003e \u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1 = df1[df1['profit_sq_roe'] \u0026gt; 0]\u003cbr /\u003e \u0026nbsp; \u0026nbsp;\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1['close'] = list([float(\"nan\")] * (len(df1.index)))\u003cbr /\u003e \u0026nbsp; \u0026nbsp; true_list = list(df1.index)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; close_p = history(true_list, ['close','turnover'], 1, '1d', skip_paused=False, fq='pre', is_panel=1)\u003cbr /\u003e \u003cbr /\u003e \u0026nbsp; \u0026nbsp; for stock in true_list:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; df1.loc[stock, 'close'] = close_p['close'][stock].values[0]\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; df1.loc[stock, 'volume'] = close_p['turnover'][stock].values[0]/10000\u003cbr /\u003e \u0026nbsp; \u0026nbsp; return df1\u003cbr /\u003e \u0026nbsp; \u0026nbsp;\u0026nbsp;\u003cbr /\u003e def Gscz(context,df1):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; #pb小于3的股票\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1 = df1[df1['valuation_pb']\u0026lt;3]\u003cbr /\u003e \u0026nbsp; \u0026nbsp; #成交额筛选\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1 = df1[df1['volume']\u0026gt;1000]\u003cbr /\u003e \u0026nbsp; \u0026nbsp;\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1['pps'] = df1['income_sq_profit_from_operations'] / df1['valuation_capitalization']\u003cbr /\u003e \u003cbr /\u003e \u0026nbsp; \u0026nbsp; # 格氏成长公式\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1['value'] = df1['pps'] * (27 + 2 * df1['growth_sq_opt_profit_growth_ratio'])\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1['outvalue_ratio'] = df1['value'] / df1['close']\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1.dropna(inplace = True)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1 = df1.sort_values('outvalue_ratio', ascending=False)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1 = df1[:num3]\u003cbr /\u003e \u0026nbsp; \u0026nbsp; buylist = list(df1['valuation_symbol'].values)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; return buylist\u003cbr /\u003e \u0026nbsp; \u0026nbsp;\u0026nbsp;\u003cbr /\u003e def time_select(context):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; yesterday = get_last_datetime().strftime('%Y-%m-%d')\u003cbr /\u003e \u0026nbsp; \u0026nbsp; qt = query(valuation.symbol, valuation.pb).filter()\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df = get_fundamentals(qt, date=yesterday)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; # 计算昨天市场所有股票PB值的分位数\u003cbr /\u003e \u0026nbsp; \u0026nbsp; factor_quantiles = df.dropna().quantile([num4])\u003cbr /\u003e \u0026nbsp; \u0026nbsp; PB = factor_quantiles.iloc[0].values\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; '''\u003cbr /\u003e \u0026nbsp; \u0026nbsp; # 计算昨天市场上跌停的股票占比\u003cbr /\u003e \u0026nbsp; \u0026nbsp; stock_list = list(get_all_securities('stock', yesterday).index)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; pct_all = history(stock_list, ['quote_rate'], 5, '1d',\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; skip_paused=False, fq=None, is_panel=1)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; pct_list = []\u003cbr /\u003e \u0026nbsp; \u0026nbsp; for i in range(5):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; values = list(pct_all.iloc[0,i,])\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; pct = (len([x for x in values if x \u0026lt;= -9.5])) / len(stock_list)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; pct_list.append(pct)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; pct = max(pct_list)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; log.info('上周最大跌停股票占比: %.2f%%' %(pct*100))\u003cbr /\u003e \u0026nbsp; \u0026nbsp; '''\u003cbr /\u003e \u0026nbsp; \u0026nbsp; # 择时空仓条件设置\u003cbr /\u003e \u0026nbsp; \u0026nbsp; if PB \u0026gt;= 10:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; log.info('空仓',PB)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; return num5, 'kongcang'\u003cbr /\u003e \u0026nbsp; \u0026nbsp; #elif pct \u0026gt; 0.1:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; #return num6, False\u003cbr /\u003e \u0026nbsp; \u0026nbsp; #elif PB \u0026lt;= 5:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; #return 0, 'chaodi'\u003cbr /\u003e \u0026nbsp; \u0026nbsp; else:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; return 0, True \u003cp\u003e \u0009\u003cbr /\u003e \u003c/p\u003e","logic":"\u003cp class=\"MsoNormal\" style=\"text-indent:44.9pt;\"\u003e \u0009在进行回测前，将回测时间段选取为\u003cspan\u003e2007\u003c/span\u003e年\u003cspan\u003e1\u003c/span\u003e月\u003cspan\u003e1\u003c/span\u003e日至\u003cspan\u003e2019\u003c/span\u003e年\u003cspan\u003e1\u003c/span\u003e月\u003cspan\u003e1\u003c/span\u003e日，参照沪深\u003cspan\u003e300\u003c/span\u003e股指，研究对象为全部动态\u003cspan\u003eA\u003c/span\u003e股或者沪深\u003cspan\u003e300\u003c/span\u003e，注入起始资金\u003cspan\u003e10\u003c/span\u003e，\u003cspan\u003e000,000\u003c/span\u003e元，采用日间策略使用日线回测，调仓频率为每周一进行一次。买入佣金为\u003cspan\u003e0.0003\u003c/span\u003e元，卖出佣金为\u003cspan\u003e0.0013\u003c/span\u003e元。滑点差值为\u003cspan\u003e0.02\u003c/span\u003e元\u003cspan\u003e/\u003c/span\u003e股（滑点是指下单的点位和最后成交的点位有差距）。\u003cspan\u003e\u003c/span\u003e  \u003c/p\u003e \u003cp class=\"MsoNormal\" style=\"text-indent:24.0pt;\"\u003e \u0009\u003cstrong\u003e空仓阀值的设定：\u003c/strong\u003e根据\u003cspan\u003eA\u003c/span\u003e股前一日的涨跌幅超过\u003cspan\u003e9.5%\u003c/span\u003e的数量占所有股数的比例，当占比达到\u003cspan\u003e3%\u003c/span\u003e时，空仓两周；当占比达到\u003cspan\u003e10%\u003c/span\u003e时，空仓六周。以上均以上海证券交易所的交易日历为准。\u003cspan\u003e\u003c/span\u003e  \u003c/p\u003e \u003cp class=\"MsoNormal\" style=\"text-indent:24.0pt;\"\u003e \u0009\u003cstrong\u003e程序的设定：\u003c/strong\u003e定义布尔变量来实现择时目标：\u003cspan\u003e\u003c/span\u003e  \u003c/p\u003e \u003cp class=\"MsoNormal\" style=\"text-indent:37.4pt;\"\u003e \u0009context.signal = True #择时空仓信号：\u003cspan\u003eTrue\u003c/span\u003e表示不空仓，\u003cspan\u003eFalse\u003c/span\u003e表示仓，\u003cspan\u003e’PB_long‘\u003c/span\u003e表示长期空仓\u003cspan\u003e\u003c/span\u003e  \u003c/p\u003e \u003cp class=\"MsoNormal\" style=\"text-indent:20.0pt;\"\u003e \u0009\u0026nbsp;\u0026nbsp;\u0026nbsp; context.b = True\u0026nbsp; #买入信号，初始买入 \u003c/p\u003e \u003cp class=\"MsoNormal\" style=\"text-indent:24.0pt;\"\u003e \u0009\u003cstrong\u003e计算出空仓的结束时间：\u003c/strong\u003e定义的\u003cspan\u003ecal\u003c/span\u003e日历中的交易日为当前日期，空仓时间段，按照交易日惯例，如果不在交易日，应选取向后一个交易日。如果当前日期小于空仓日期，执行空仓指令，当时间段结束时，\u003cspan\u003eb\u003c/span\u003e重新赋值为\u003cspan\u003efalse\u003c/span\u003e。\u003cspan\u003e\u003c/span\u003e  \u003c/p\u003e \u003cp class=\"MsoNormal\" style=\"text-indent:24.0pt;\"\u003e \u0009若在正常调仓时间段，则卖出所有股票，仓位为\u003cspan\u003e0\u003c/span\u003e。\u003cspan\u003e\u003c/span\u003e  \u003c/p\u003e \u003cp class=\"MsoNormal\" style=\"text-indent:24.0pt;\"\u003e \u0009选出股票列表中的股票，仓位调整标准：将当前资金平均分配于每只股票\u003cspan\u003e.\u003c/span\u003e  \u003c/p\u003e \u003cp class=\"MsoNormal\" style=\"text-indent:24.0pt;\"\u003e \u0009\u003cstrong\u003e接着进行选股：\u003c/strong\u003e剔除停牌股、新股、\u003cspan\u003eST\u003c/span\u003e股合集，将剩余的股票存在\u003cspan\u003elist\u003c/span\u003e中。\u003cspan\u003e\u003c/span\u003e  \u003c/p\u003e \u003cp class=\"MsoNormal\" style=\"text-indent:24.0pt;\"\u003e \u0009然后提取单季度财务指标中的股票代码、\u003cspan\u003eEPS\u003c/span\u003e（每股收益）、\u003cspan\u003eROE\u003c/span\u003e（权益收益率）、\u003cspan\u003e operProfitYOY\u003c/span\u003e（营业利润同比增长率）、结束日期、收盘价，索引设置成股票代码。\u003cspan\u003e\u003c/span\u003e  \u003c/p\u003e \u003cp class=\"MsoNormal\" style=\"text-indent:24.0pt;\"\u003e \u0009\u003cstrong\u003e进行成长股的估值：\u003c/strong\u003e\u003cspan\u003e\u003c/span\u003e  \u003c/p\u003e \u003cp\u003e \u0009\u003cspan style=\"color:#000000;\"\u003e每股估值\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e=EPS*(8.5+2*operProfitYOY)*(1+overflow)\u003c/span\u003e  \u003c/p\u003e \u003cp\u003e \u0009\u003cspan style=\"color:#337FE5;\"\u003e \u003c/span\u003e \u003c/p\u003e \u003cp class=\"MsoNormal\" style=\"margin-left:72.0pt;text-indent:-72.0pt;\"\u003e \u0009\u003cspan style=\"color:#000000;\"\u003e注意事项：\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e1).\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e每股估值\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e=EPS*(8.5+2*PEG),\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e由于\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003ePEG\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e（市盈率相对盈利增长比率）较难计算，故采用\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003eoperProfitYOY\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e（营业利润同比增长率）整数不是百分数。\u003c/span\u003e  \u003c/p\u003e \u003cp class=\"MsoNormal\" style=\"margin-left:72.0pt;text-indent:-72.0pt;\"\u003e \u0009\u003cspan style=\"color:#000000;\"\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;2).比较\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003eoperProfitYOY\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e（营业利润同比增长率）、\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003eNetAssetGrowRate\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e（净资产增长率）、\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003eniYOY\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e（净利润同比增长率）、\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003eniQOQ\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e（净利润环比增长率）四个指标，选用后三者效果不佳，采用\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003eoperProfitYOY\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e（营业利润同比增长率）更为理想。\u003c/span\u003e  \u003c/p\u003e \u003cp class=\"MsoNormal\" style=\"margin-left:72.0pt;text-indent:-72.0pt;\"\u003e \u0009\u003cspan style=\"color:#000000;\"\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3)吸取前任成果，聚宽上面营业利润增长率变量标签：\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003einc_operation_profit_year_on_year\u003c/span\u003e  \u003c/p\u003e \u003cp class=\"MsoNormal\"\u003e \u0009\u003cspan style=\"color:#000000;\"\u003e定义一个\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003eoutvalue_ratio=\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e每股估值\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e收盘价\u003c/span\u003e  \u003c/p\u003e \u003cp class=\"MsoNormal\"\u003e \u0009\u003cspan style=\"color:#000000;\"\u003e根据算出的\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003eoutvalue_ratio\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e从大到小排序，提取\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003eROE\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e大于\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e的股票，再从中选取前\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e50\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e只股票。\u003c/span\u003e  \u003c/p\u003e \u003cp class=\"MsoNormal\" style=\"text-indent:24.0pt;\"\u003e \u0009\u003cspan\u003e\u003c/span\u003e  \u003c/p\u003e \u003cspan style=\"color:#000000;\"\u003e\u003cstrong\u003e最后进行择时：\u003c/strong\u003e\u003c/span\u003e\u003cspan style=\"color:#000000;\"\u003e\u003cstrong\u003e\u003c/strong\u003e\u003c/span\u003e\u003cbr /\u003e \u003cp\u003e \u0009\u003cbr /\u003e \u003c/p\u003e \u003cp\u003e \u0009\u003cspan style=\"color:#337FE5;\"\u003e\u003cspan style=\"color:#000000;\"\u003e\u003cstrong\u003e\u003cimg src=\"https://6d79-mywxapp-eafa79-1255469223.tcb.qcloud.la/detail/logic.png\" alt=\"\" /\u003e\u003cbr /\u003e \u003c/strong\u003e\u003c/span\u003e\u003c/span\u003e  \u003c/p\u003e \u003cp\u003e \u0009\u003cspan style=\"color:#337FE5;\"\u003e\u003cspan style=\"color:#000000;\"\u003e\u003cstrong\u003e \u003c/strong\u003e\u003c/span\u003e\u003c/span\u003e \u003c/p\u003e \u003cp class=\"MsoNormal\"\u003e \u0009\u003cstrong\u003e选取所有\u003cspan\u003eA\u003c/span\u003e股前一日的涨跌幅大于\u003cspan\u003e9.5%\u003c/span\u003e的股数占所有\u003cspan\u003eA\u003c/span\u003e股股数的比例，当占比达到\u003cspan\u003e10%\u003c/span\u003e时空仓六周；当占比达到\u003cspan\u003e3%\u003c/span\u003e时空仓两周。\u003cspan\u003e\u003c/span\u003e \u003c/strong\u003e \u003c/p\u003e \u003cstrong\u003e注意事项：当选取所有\u003cspan\u003eA\u003c/span\u003e股前一日的涨跌幅大于\u003cspan\u003e10%\u003c/span\u003e或大于\u003cspan\u003e9%\u003c/span\u003e的股数占所有\u003cspan\u003eA\u003c/span\u003e股股数的比例用以择时时效果不佳，而\u003cspan\u003e9.5%\u003c/span\u003e时则较为理想\u003c/strong\u003e  \u003cp\u003e \u0009\u003cbr /\u003e \u003c/p\u003e","description_1":"格氏成长策略由格雷厄姆的成长公式改进而来，策略原本核心思想是选出估值合理的高成长公司。公式如下：价值=当期（正常）利润x（8.5+2x预期年增长率） 基于对A股市场的改进，我们采用了季度的数据，更好的最终近期出现高增长的企业，本质上是一种业绩反转逻辑。公式如下： 价值=当季（正常）利润*（27+2*季度运营利润同比增长率） 然后通过估计的价值比上公司的市场价格P，得到公司目前的相对估值情况。即outvalue_ratio：价值/价格 比率越大，说明公司被低估的程度越大。 在此基础上，我们每周对比率进行排序，选取比率最大的前50名公司作为投资组合。 预期年增长率在策略中用当季/当年累计的净利润/运营利润增长率替代，也可以用分析师预期增长率替代，选择不同数据会造成选股及回测结果的不同。目前回测采用的是单季运营利润增长率，当期利润采用净利润。","counts":"5只","description_2":"择时空仓策略：正常市场状态下，按照格氏成长股估值公式计算市场所有股票估值，按市值/估值从小到大排序，买入排序靠前的股票（即按照公式计算当前最被低估的股票）；择时信号分为择时空仓信号：当择时空仓信号发出时，提示市场未来发生整体下跌的概率很高，卖出全部股票； 仓位管理：为了控制回测，有采用半仓现金控制最大回撤","detailimage1":"https://6d79-mywxapp-eafa79-1255469223.tcb.qcloud.la/detail/mggscz.png"}
{"_id":"XJiRZeSiwXKAQsUI","counts":"3只","percent":"满仓，等额","income":"147.88%","yearpercent":"19.5%","baseincome":"67.55%","drawdown":"31.17%","detailtime":"2014-01-01  至  2019-01-01","description_2":"我们通过改进的银行翻倍公式选出三只股，月度调仓，一直满仓，得到上图结果。近五年基本每年都有超额收益，通过择时空仓躲过了15年的一波比较大的回撤，最后回撤30%左右。","description_1":"  我们分别在MindGo平台和JoinQuant平台验证策略，由于平台数据差异导致策略结果不是完全一致，但基本接近。","description_i":"https://6d79-mywxapp-eafa79-1255469223.tcb.qcloud.la/detail/gs.png","description_i2":"https://6d79-mywxapp-eafa79-1255469223.tcb.qcloud.la/detail/gs2.png","codeimage":"https://6d79-mywxapp-eafa79-1255469223.tcb.qcloud.la/detail/mgcode.png","code":"# 使用模块导入\u003cbr /\u003e import numpy as np\u003cbr /\u003e import pandas as pd\u003cbr /\u003e import datetime\u003cbr /\u003e import math\u003cbr /\u003e import time\u003cbr /\u003e from datetime import date\u003cbr /\u003e import re\u003cbr /\u003e \u003cbr /\u003e '''\u003cbr /\u003e 银行行业增强策略-银行翻倍策略\u003cbr /\u003e '''\u003cbr /\u003e # 参数设置：\u003cbr /\u003e name = '银行翻倍策略，择时'\u003cbr /\u003e # 对比基准设置'801780.SL''000300.SH' '000905.SH'\u003cbr /\u003e num1 = '801780.SL'\u003cbr /\u003e # 全仓(1)或者半仓(0.5)\u003cbr /\u003e num4 = 1\u003cbr /\u003e # 选股条件\u003cbr /\u003e num2 = '银行股 上市天数\u0026gt;200'\u003cbr /\u003e # 目标选股数量\u003cbr /\u003e num3 = 3\u003cbr /\u003e #长期空仓天数\u003cbr /\u003e num5 = 250\u003cbr /\u003e #市场空仓对应的PB分位数阈值\u003cbr /\u003e num6 = 0.8\u003cbr /\u003e \u003cbr /\u003e def init(context):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; set_benchmark(num1)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; get_iwencai(num2)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; context.signal = True\u0026nbsp;\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; context.b = True\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; g.output_stocklist = {}\u003cbr /\u003e \u0026nbsp; \u0026nbsp; g.day = 0\u003cbr /\u003e \u0026nbsp; \u0026nbsp; g.step = 5\u003cbr /\u003e \u0026nbsp; \u0026nbsp;\u0026nbsp;\u003cbr /\u003e def before_trading(context):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; #完成选股\u003cbr /\u003e \u0026nbsp; \u0026nbsp; if g.day/g.step==0:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; g.stock = GrahamStockFilter(context)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; for s in g.stock:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; g.output_stocklist[s] = num4 / len(g.stock)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; set_stock_picks(g.output_stocklist)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; g.output_stocklist.clear()\u003cbr /\u003e \u003cbr /\u003e def handle_bar(context,bar_dict):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; if g.day%g.step==0:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; patt=r'择时'\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; pattern = re.compile(patt)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; result = pattern.findall(name)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; if result:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; period, context.signal = time_select(context)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; if context.signal == 'kongcang' and context.b is True:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; context.b = False\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; context.date = get_datetime() + datetime.timedelta(days=period)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; for stock in list(context.portfolio.stock_account.positions.keys()):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; order_target_value(stock, 0)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; log.info('空仓信号在' + get_datetime().strftime('%Y-%m-%d') + '触发，空仓' + str(period) + '天')\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; if context.b is False and get_datetime() \u0026gt; context.date:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; context.b = True\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; if context.signal == 'chaodi':\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; context.b = True\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; context.signal = True\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp;\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; if context.signal is True and context.b is True:\u0026nbsp;\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; #buylist = GrahamStockFilter(context)\u0026nbsp;\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; for hold in list(context.portfolio.stock_account.positions.keys()):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; if hold not in list(g.stock):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; order_target_value(hold, 0)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; for stock in g.stock:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; order_target_percent(stock, num4 / len(g.stock))\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; else:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; #buylist = GrahamStockFilter(context)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; for hold in list(context.portfolio.stock_account.positions):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; if hold not in list(g.stock):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; order_target_value(hold, 0)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; for stock in g.stock:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; order_target_percent(stock, num4 / len(g.stock))\u003cbr /\u003e \u003cbr /\u003e def after_trading(context):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; g.day += 1\u003cbr /\u003e \u003cbr /\u003e def GrahamStockFilter(context,overflow=0):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1 = Data(context)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; buylist = Yhfb(context,df1)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; log.info(get_datetime().strftime('%Y-%m-%d') + '选股为:' + str(buylist)[:])\u003cbr /\u003e \u0026nbsp; \u0026nbsp; return buylist\u003cbr /\u003e \u0026nbsp; \u0026nbsp;\u0026nbsp;\u003cbr /\u003e # 数据获取\u003cbr /\u003e def Data(context):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; yesterday = get_last_datetime().strftime('%Y%m%d')\u003cbr /\u003e \u0026nbsp; \u0026nbsp; today = get_datetime().strftime('%Y%m%d')\u003cbr /\u003e \u0026nbsp; \u0026nbsp; stock_list = context.iwencai_securities\u003cbr /\u003e \u0026nbsp; \u0026nbsp; #stock_list = get_industry_stocks('T1901')\u003cbr /\u003e \u0026nbsp; \u0026nbsp; value = get_price(stock_list, None, today, '1d', ['is_paused', 'is_st','open','high_limit','low_limit'], True, None, 1, is_panel=1)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; stock_list = [stock for stock in stock_list if value['is_paused'].ix[0,stock] == 0]\u003cbr /\u003e \u0026nbsp; \u0026nbsp; stock_list = [stock for stock in stock_list if value['is_st'].ix[0,stock] == 0]\u003cbr /\u003e \u0026nbsp; \u0026nbsp; stock_list = [stock for stock in stock_list if value['open'].ix[0,stock] != value['high_limit'].ix[0,stock] and value['open'].ix[0,stock]!= value['low_limit'].ix[0,stock]]\u003cbr /\u003e \u0026nbsp; \u0026nbsp; log.info('股票池数量：%d' %len(stock_list))\u003cbr /\u003e \u0026nbsp; \u0026nbsp; #获取财务数据\u003cbr /\u003e \u0026nbsp; \u0026nbsp; q = query(valuation.symbol, income.basic_eps, valuation.pb,valuation.pe, valuation.market_cap,\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; income_one_season.profit_from_operations, valuation.capitalization, profit_one_season.roe,balance.total_liabilities,\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; growth_one_season.opt_profit_growth_ratio).filter(valuation.symbol.in_(stock_list)).order_by(\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; valuation.symbol)\u003cbr /\u003e \u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1 = get_fundamentals(q, date=yesterday)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1 = df1.set_index(df1['valuation_symbol'])\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1 = df1[df1['profit_one_season_roe'] \u0026gt; 0]\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1['close'] = list([float(\"nan\")] * (len(df1.index)))\u003cbr /\u003e \u0026nbsp; \u0026nbsp; true_list = list(df1.index)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; close_p = history(true_list, ['close','turnover'], 1, '1d', skip_paused=False, fq='pre', is_panel=1)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; for stock in true_list:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; df1.loc[stock, 'close'] = close_p['close'][stock].values[0]\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; df1.loc[stock, 'volume'] = close_p['turnover'][stock].values[0]/10000\u003cbr /\u003e \u0026nbsp; \u0026nbsp; return df1\u003cbr /\u003e \u003cbr /\u003e def Yhfb(context,df1):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1 = df1[df1['growth_one_season_opt_profit_growth_ratio']\u0026gt;0]\u003cbr /\u003e \u0026nbsp; \u0026nbsp; #pb小于3的股票\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1 = df1[df1['valuation_pb']\u0026lt;3]\u003cbr /\u003e \u0026nbsp; \u0026nbsp; #成交额筛选\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1 = df1[df1['volume']\u0026gt;5000]\u003cbr /\u003e \u0026nbsp; \u0026nbsp;\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1['double_time'] = df1.apply(\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; lambda row: round(math.log(2.0 * row['valuation_pb']/(1+row['growth_one_season_opt_profit_growth_ratio']/100), (1.0 + row['profit_one_season_roe'] / 100)), 2), axis=1)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df_double = df1.sort_values('double_time', ascending=True)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df1 = df_double[:num3]\u0026nbsp;\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; buylist = list(df1['valuation_symbol'].values)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; return buylist\u003cbr /\u003e \u003cbr /\u003e def time_select(context):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; yesterday = get_last_datetime().strftime('%Y-%m-%d')\u003cbr /\u003e \u0026nbsp; \u0026nbsp; qt = query(valuation.symbol, valuation.pb).filter()\u003cbr /\u003e \u0026nbsp; \u0026nbsp; df = get_fundamentals(qt, date=yesterday)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; # 计算昨天市场所有股票PB值的分位数\u003cbr /\u003e \u0026nbsp; \u0026nbsp; factor_quantiles = df.dropna().quantile([num6])\u003cbr /\u003e \u0026nbsp; \u0026nbsp; PB = factor_quantiles.iloc[0].values\u0026nbsp;\u003cbr /\u003e \u0026nbsp; \u0026nbsp; '''\u003cbr /\u003e \u0026nbsp; \u0026nbsp; # 计算昨天市场上跌停的股票占比\u003cbr /\u003e \u0026nbsp; \u0026nbsp; stock_list = list(get_all_securities('stock', yesterday).index)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; pct_all = history(stock_list, ['quote_rate'], 5, '1d',\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; skip_paused=False, fq=None, is_panel=1)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; pct_list = []\u003cbr /\u003e \u0026nbsp; \u0026nbsp; for i in range(5):\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; values = list(pct_all.iloc[0,i,])\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; pct = (len([x for x in values if x \u0026lt;= -9.5])) / len(stock_list)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; pct_list.append(pct)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; pct = max(pct_list)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; log.info('上周最大跌停股票占比: %.2f%%' %(pct*100))\u003cbr /\u003e \u0026nbsp; \u0026nbsp; '''\u003cbr /\u003e \u0026nbsp; \u0026nbsp; # 择时空仓条件设置\u003cbr /\u003e \u0026nbsp; \u0026nbsp; if PB \u0026gt;= 10:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; log.info('空仓',PB)\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; return num5, 'kongcang'\u003cbr /\u003e \u0026nbsp; \u0026nbsp; #elif pct \u0026gt; 0.1:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; #return num6, False\u003cbr /\u003e \u0026nbsp; \u0026nbsp; #elif PB \u0026lt;= 5:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; #return 0, 'chaodi'\u003cbr /\u003e \u0026nbsp; \u0026nbsp; else:\u003cbr /\u003e \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; return 0, True","id":"1","title":"银行翻倍策略","detailimage1":"https://6d79-mywxapp-eafa79-1255469223.tcb.qcloud.la/detail/mgyhfb.png","detailimage2":"https://6d79-mywxapp-eafa79-1255469223.tcb.qcloud.la/detail/jqyhfb.png","logic":"\u003cspan style=\"font-size:14px;\"\u003e\u003c/span\u003e\u003cspan style=\"font-size:14px;\"\u003e银行翻倍策略基于由\u003c/span\u003e\u003cspan style=\"font-size:14px;\"\u003eFlitter\u003c/span\u003e\u003cspan style=\"font-size:14px;\"\u003e在提出的银行资产翻倍期公式，对银行行业成分股进行筛选，从而实现银行行业的指数增强。\u003c/span\u003e\u003cspan style=\"font-size:14px;\"\u003e \u003cp class=\"MsoNormal\"\u003e \u0009\u003cspan\u003e\u003c/span\u003e \u003c/p\u003e \u003cp class=\"MsoNormal\"\u003e \u0009策略公式如下所示： \u003ci\u003e\u003cspan\u003e\u003c/span\u003e\u003c/i\u003e \u003c/p\u003e \u003cp class=\"MsoNormal\"\u003e \u0009\u003cimg src=\"https://6d79-mywxapp-eafa79-1255469223.tcb.qcloud.la/detail/gs.png\" alt=\"\" /\u003e \u003c/p\u003e \u003cp class=\"MsoNormal\"\u003e \u0009加权净资产翻倍率又称为翻倍期，翻倍期为‘公司不分红，资产收益率不变，每年收益利滚利，达到股价两倍所需要的时间’，‘翻倍期间越小越好’。\u003cspan\u003e\u003c/span\u003e \u003c/p\u003e \u003cp class=\"MsoNormal\"\u003e \u0009本策略在优化过程中，在以上公式中加入了利润增长率因子进行改进。\u003cspan\u003e\u003c/span\u003e \u003c/p\u003e \u003cp class=\"MsoNormal\"\u003e \u0009改进公式为：\u003cspan\u003e\u003c/span\u003e \u003c/p\u003e \u003cp class=\"MsoNormal\"\u003e \u0009\u003cb\u003e加权净资产翻倍率\u003cspan\u003e=log\u003c/span\u003e\u003csub\u003e（\u003cspan\u003e1+roe\u003c/span\u003e）\u003c/sub\u003e（（市净率\u003cspan\u003e*2\u003c/span\u003e）\u003cspan\u003e/\u003c/span\u003e（\u003cspan\u003e1+\u003c/span\u003e运营利润同比增长率））\u003cspan\u003e\u003c/span\u003e\u003c/b\u003e \u003c/p\u003e 公式中市净率、净资产收益率取上一交易日的值，根据以上公式算出翻倍期从小到大排序后取前\u003cspan\u003e5\u003c/span\u003e只进行平均配仓。每月进行调仓\u003c/span\u003e","bool":false}
